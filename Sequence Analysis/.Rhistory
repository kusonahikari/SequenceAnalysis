# KCNC1
KCNC1_search <- entrez_search(db = "nucleotide", term = "KCNC1[Gene Name] AND homo sapiens[Organism]")
KCNC1_sum <- entrez_summary(db ="nucleotide", id=KCNC1_search$ids)
#accession number
# extract_from_esummary(KCNC1_sum,"caption")
#sequence length
# extract_from_esummary(KCNC1_sum, "slen")
# Create data for summary
# Total results found
hit_found <- c(length(EPM2A_search$ids), length(CSTB_search$ids),length(SCN1A_search$ids),length(NHLRC1_search$ids),length(KCNC1_search))
# Full gene name
f_gene_name <- c(extract_from_esummary(EPM2A_sum,"title")[3],extract_from_esummary(CSTB_sum,"title")[1],extract_from_esummary(SCN1A_sum,"title")[3], extract_from_esummary(NHLRC1_sum,"title")[1], extract_from_esummary(KCNC1_sum,"title")[2])
# Accession number
accession_number <- c(extract_from_esummary(EPM2A_sum,"caption")[3],extract_from_esummary(CSTB_sum,"caption")[1],extract_from_esummary(SCN1A_sum,"caption")[3], extract_from_esummary(NHLRC1_sum,"caption")[1], extract_from_esummary(KCNC1_sum,"caption")[2])
# Sequence length
seq_length <- c(extract_from_esummary(EPM2A_sum,"slen")[3],extract_from_esummary(CSTB_sum,"slen")[1],extract_from_esummary(SCN1A_sum,"slen")[3], extract_from_esummary(NHLRC1_sum,"slen")[1], extract_from_esummary(KCNC1_sum,"slen")[2])
# Chromosomal Location
chromo_loc <- c(6,21,2,6,11)
dat <- data.frame(hit_found,f_gene_name,accession_number,seq_length,chromo_loc)
rownames(dat) <- c("EPM2A","CSTB","SCN1A","NHLRC1","KCNC1")
colnames(dat) <- c("Total results found","Full Gene Name","Accession Number","Sequence Length","Chromosomal Location")
kable(dat)
# Using head() to show the first five results only
# Title
head(extract_from_esummary(EPM2A_sum, "title"))
# Sequence length
head(extract_from_esummary(EPM2A_sum,"slen"))
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression<- melt(gene_expression)
boxplot(log10(value) ~ variable, data = gene_expression, xlab =  "Group", ylab = "Log10(value)")
sd(PME)
sd(PME)
# Create data frame
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression<- melt(gene_expression)
# Boxplot to see the distribution
boxplot(log10(value) ~ variable, data = gene_expression, xlab =  "Group", ylab = "Log10(value)")
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate the standard deviation
sd(PME)
?prop.test()
?prop.test(PME)
prop.test(PME)
barplot(data = c(mean(PME, healthy)))
barplot(data = c(mean(PME), mean(healthy)))
# Create data frame
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression_melted <- melt(gene_expression)
# Boxplot to see the distribution
boxplot(log10(value) ~ variable, data = gene_expression_melted, xlab =  "Group", ylab = "Log10(value)")
PME <- PME[-1]
data <- c(mean(PME),mean(healthy))
barplot(data = data, )
barplot(data = data)
barplot(data = data, ylim = c(0, 5))
?barplot
data <- c(log10(mean(PME)),log10(mean(healthy)))
barplot(data = data, ylim = c(0, 5), beside = F)
barplot(data = data, ylim = c(0, 5), beside =  T)
barplot(height = data, ylim = c(0, 5), beside =  T)
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("Healthy Group","PMEs patient"))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("Healthy Group","PMEs patient", ylab = "log10 of value"), col = c("lightblue","lightpink"))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("Healthy Group","PMEs patient"), ylab = "log10 of value", col = c("lightblue","lightpink"))
?arrows
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
plt[1]
plt[2]
dev.off()
data <- c(log10(mean(PME)),log10(mean(healthy)))
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"), add = T)
arrows(plt[1],log10(mean(PME)+sd_PME),plt[1],log10(mean(PME)),0.05,90,3 )
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"), add = T)
plt <- barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.05,90,3 )
?arrows()
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"), add = T)
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.05,90,3 )
barplot()
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.05,90,3 )
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.05,90,3 )
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.05,90,3 )
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.05,90,5)
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),1,90,3 )
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.5,90,3 )
dev.off()
plt[2]
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.5,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),0.7,log10(mean(healthy)),0.5,90,3 )
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.5,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),1.9,log10(mean(healthy)),0.5,90,3 )
# Create data frame
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression <- melt(gene_expression)
# Boxplot to see the distribution
boxplot(log10(value) ~ variable, data = gene_expression, xlab =  "Group", ylab = "Log10(value)")
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),0.5,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),1.9,log10(mean(healthy)),0.5,90,3 )
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),1,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),1.9,log10(mean(healthy)),1,90,3 )
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log2(mean(PME)),log2(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log2(mean(PME)+sd_PME),0.7,log2(mean(PME)),1,90,3 )
arrows(1.9,log2(mean(healthy)+sd_healthy),1.9,log2(mean(healthy)),1,90,3 )
# Create data frame
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression <- melt(gene_expression)
# Boxplot to see the distribution
boxplot(log10(value) ~ variable, data = gene_expression, xlab =  "Group", ylab = "Log10(value)")
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log2(mean(PME)),log2(mean(healthy)))
barplot(height = data, ylim = c(0, 10), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log2(mean(PME)+sd_PME),0.7,log2(mean(PME)),1,90,3 )
arrows(1.9,log2(mean(healthy)+sd_healthy),1.9,log2(mean(healthy)),1,90,3 )
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log2(mean(PME)),log2(mean(healthy)))
barplot(height = data, ylim = c(0, 20), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log2(mean(PME)+sd_PME),0.7,log2(mean(PME)),1,90,3 )
arrows(1.9,log2(mean(healthy)+sd_healthy),1.9,log2(mean(healthy)),1,90,3 )
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log2(mean(PME)),log2(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME)+sd_PME),0.7,log10(mean(PME)),1,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),1.9,log10(mean(healthy)),1,90,3 )
t.test(x = healthy, y = PME)
# Clean up the R enviriment before conduct analysis
rm(list = ls())
# Load neccesary package
library(msa)
library(Biostrings)
library(Peptides)
library(reshape2)
library(rentrez)
library(knitr)
# library(seqinr)
# Create data frame
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression <- melt(gene_expression)
# Boxplot to see the distribution
boxplot(log10(value) ~ variable, data = gene_expression, xlab =  "Group", ylab = "Log10(value)")
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME, na.rm = T)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME, na.rm = T)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME, na.rm = T)+sd_PME),0.7,log10(mean(PME, na.rm = T)),1,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),1.9,log10(mean(healthy)),1,90,3 )
detach("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
#CSTB
CSTB_search <- entrez_search(db = "nucleotide", term = "CSTB[Gene Name] AND homo sapiens[Organism]")
# Clean up the R enviriment before conduct analysis
rm(list = ls())
# Load neccesary package
library(msa)
library(Biostrings)
library(Peptides)
library(reshape2)
library(rentrez)
library(knitr)
# library(seqinr)
#CSTB
CSTB_search <- entrez_search(db = "nucleotide", term = "CSTB[Gene Name] AND homo sapiens[Organism]")
CSTB_sum <- entrez_summary(db ="nucleotide", id=CSTB_search$ids)
# Accession number
# extract_from_esummary(CSTB_sum,"caption")[c(1,2)]
# Sequence length
# extract_from_esummary(CSTB_sum, "slen")[c(1,2)]
# Chormosomal Location
# extract_from_esummary(CSTB_sum, c("subtype","subname"))[c(1,2)]
#SCN1A
SCN1A_search <- entrez_search(db = "nucleotide", term = "SCN1A[Gene Name] AND homo sapiens[Organism]")
SCN1A_sum <- entrez_summary(db ="nucleotide", id=SCN1A_search$ids)
# Accession number
# extract_from_esummary(SCN1A_sum,"caption")[1]
# Sequence length
# extract_from_esummary(SCN1A_sum, "slen")[1]
# extract_from_esummary(SCN1A_sum, c("subtype", "subname"))[1]
# NHLRC1
NHLRC1_search <- entrez_search(db = "nucleotide", term = "NHLRC1[Gene Name] AND homo sapiens[Organism]")
NHLRC1_sum <- entrez_summary(db ="nucleotide", id=NHLRC1_search$ids)
#accession number
# extract_from_esummary(NHLRC1_sum,"caption")[c(1,2)]
#sequence length
# extract_from_esummary(NHLRC1_sum, "slen")[c(1,2)]
# KCNC1
KCNC1_search <- entrez_search(db = "nucleotide", term = "KCNC1[Gene Name] AND homo sapiens[Organism]")
KCNC1_sum <- entrez_summary(db ="nucleotide", id=KCNC1_search$ids)
#accession number
# extract_from_esummary(KCNC1_sum,"caption")
#sequence length
# extract_from_esummary(KCNC1_sum, "slen")
# Create data for summary
# Total results found
hit_found <- c(length(EPM2A_search$ids), length(CSTB_search$ids),length(SCN1A_search$ids),length(NHLRC1_search$ids),length(KCNC1_search))
# Search in nucleotide data bank of NCBI
EPM2A_search <- entrez_search(db = "nucleotide", term = "EPM2A[Gene Name] AND homo sapiens[Organism]")
# Extract data summary from NCBI by searched ID
EPM2A_sum <- entrez_summary(db ="nucleotide", id=EPM2A_search$ids)
# Accession number
extract_from_esummary(EPM2A_sum,"caption")[c(3,4)]
# Chormosomal Location
extract_from_esummary(EPM2A_sum, c("subtype","subname"))[c(3,4)]
#CSTB
CSTB_search <- entrez_search(db = "nucleotide", term = "CSTB[Gene Name] AND homo sapiens[Organism]")
CSTB_sum <- entrez_summary(db ="nucleotide", id=CSTB_search$ids)
# Accession number
# extract_from_esummary(CSTB_sum,"caption")[c(1,2)]
# Sequence length
# extract_from_esummary(CSTB_sum, "slen")[c(1,2)]
# Chormosomal Location
# extract_from_esummary(CSTB_sum, c("subtype","subname"))[c(1,2)]
#SCN1A
SCN1A_search <- entrez_search(db = "nucleotide", term = "SCN1A[Gene Name] AND homo sapiens[Organism]")
SCN1A_sum <- entrez_summary(db ="nucleotide", id=SCN1A_search$ids)
# Accession number
# extract_from_esummary(SCN1A_sum,"caption")[1]
# Sequence length
# extract_from_esummary(SCN1A_sum, "slen")[1]
# extract_from_esummary(SCN1A_sum, c("subtype", "subname"))[1]
# NHLRC1
NHLRC1_search <- entrez_search(db = "nucleotide", term = "NHLRC1[Gene Name] AND homo sapiens[Organism]")
NHLRC1_sum <- entrez_summary(db ="nucleotide", id=NHLRC1_search$ids)
#accession number
# extract_from_esummary(NHLRC1_sum,"caption")[c(1,2)]
#sequence length
# extract_from_esummary(NHLRC1_sum, "slen")[c(1,2)]
# KCNC1
KCNC1_search <- entrez_search(db = "nucleotide", term = "KCNC1[Gene Name] AND homo sapiens[Organism]")
KCNC1_sum <- entrez_summary(db ="nucleotide", id=KCNC1_search$ids)
#accession number
# extract_from_esummary(KCNC1_sum,"caption")
#sequence length
# extract_from_esummary(KCNC1_sum, "slen")
# Create data for summary
# Total results found
hit_found <- c(length(EPM2A_search$ids), length(CSTB_search$ids),length(SCN1A_search$ids),length(NHLRC1_search$ids),length(KCNC1_search))
# Full gene name
f_gene_name <- c(extract_from_esummary(EPM2A_sum,"title")[3],extract_from_esummary(CSTB_sum,"title")[1],extract_from_esummary(SCN1A_sum,"title")[3], extract_from_esummary(NHLRC1_sum,"title")[1], extract_from_esummary(KCNC1_sum,"title")[2])
# Accession number
accession_number <- c(extract_from_esummary(EPM2A_sum,"caption")[3],extract_from_esummary(CSTB_sum,"caption")[1],extract_from_esummary(SCN1A_sum,"caption")[3], extract_from_esummary(NHLRC1_sum,"caption")[1], extract_from_esummary(KCNC1_sum,"caption")[2])
# Sequence length
seq_length <- c(extract_from_esummary(EPM2A_sum,"slen")[3],extract_from_esummary(CSTB_sum,"slen")[1],extract_from_esummary(SCN1A_sum,"slen")[3], extract_from_esummary(NHLRC1_sum,"slen")[1], extract_from_esummary(KCNC1_sum,"slen")[2])
# Chromosomal Location
chromo_loc <- c(6,21,2,6,11)
dat <- data.frame(hit_found,f_gene_name,accession_number,seq_length,chromo_loc)
rownames(dat) <- c("EPM2A","CSTB","SCN1A","NHLRC1","KCNC1")
colnames(dat) <- c("Total results found","Full Gene Name","Accession Number","Sequence Length","Chromosomal Location")
kable(dat)
t.test(healthy, PME)
# Create data frame
healthy <- c(33508,33508,26489,42152,25442,24899)
PME <- c(1152,3344,2811,3501,3653,3989)
gene_expression <- data.frame(healthy, PME)
gene_expression <- melt(gene_expression)
# Boxplot to see the distribution
boxplot(log10(value) ~ variable, data = gene_expression, xlab =  "Group", ylab = "Log10(value)")
# Exclude the outlier out of the data
PME <- PME[-1]
# Calculate standard deviation
sd_PME <- sd(PME, na.rm = T)
sd_healthy <- sd(healthy)
# Plot the result
data <- c(log10(mean(PME, na.rm = T)),log10(mean(healthy)))
barplot(height = data, ylim = c(0, 5), beside =  T, names.arg = c("PMEs patient","Healthy Group"), ylab = "log10 of value", col = c("lightblue","lightpink"))
arrows(0.7,log10(mean(PME, na.rm = T)+sd_PME),0.7,log10(mean(PME, na.rm = T)),1,90,3 )
arrows(1.9,log10(mean(healthy)+sd_healthy),1.9,log10(mean(healthy)),1,90,3 )
?readDNAStringSet
?t.test
t.test(healthy,PME, alternative = "two.sided")
lm(value ~ variable, data = gene_expression)
anova(lm(value ~ variable, data = gene_expression))
source('~/.active-rstudio-document', echo=TRUE)
DNA_alignment
?msa
dev.off()
sequence
DNA_alignment
str(DNA_alignment)
CTCCCCGCCCCGCGCCCCGCCCCGCGCCCCGCCCCGCGC
330 - 36
?msaPrettyPrint
953-533
nchar(CCCCGCCCCGCG)
nchar("CCCCGCCCCGCG")
420/12
sequence
1013-533
480/12
977-533
444/12
917 - 533
384/12
533/3
aaComp()
nchar("AGCCGGCCACCGCCGAGACCCAGCACATCGCCGACCAG")
533-38
# Clean up the R enviriment before conduct analysis
rm(list = ls())
# Load neccesary package
library(reshape2)
library(rentrez)
library(knitr)
library(msa)
nchar("CAGRPPPQPATAE")
20
175-20
nchar("!!!!!!!!!!!!!!!!!!!!!!!!!!!")
155-28
nchar("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
nchar("!!!!!!!!!!!!!!!!!!!!!!!!!!!******!")
168- 34
translate(CCCCGCCCCGCG)
translate("CCCCGCCCCGCG")
nchar("CCCCGCCCCGCG")
aacomp(ORF2)
?aacomp
aaComp(ORF2)
# Clean up the R enviriment before conduct analysis
rm(list = ls())
# Load neccesary package
library(reshape2)
library(rentrez)
library(knitr)
library(msa)
library(Biostrings)
library(Peptides)
# library(seqinr)
# Read data sequence
# The data sequence file was created by R, the code can be found in supplement script
sequence <- readDNAStringSet("data/sequence.fa")
# DNA alignment with ClustalW method
DNA_alignment <- msa(sequence, method = "ClustalW", type = "dna", order ="input")
# Visualize the result
# Please note that order to produce pdf type, you have to install Latex beforehand
msaPrettyPrint(DNA_alignment, output = "pdf", showNames = "left", askForOverwrite = F)
# The pdf file is then converted into image file and inserted into document
#Prepare open reading frame from position 0 for protein translation
sequence_ORF0 <- sequence
#Prepare open reading frame from position +1 for protein translation
sequence_ORF1 <- DNAStringSet(sequence, start = 2)
#Prepare open reading frame +from position 2 for protein translation
sequence_ORF2 <- DNAStringSet(sequence, start = 3)
#Translation ORF0
ORF0 <- Biostrings::translate(sequence_ORF0)
#Translation ORF1
ORF1 <- Biostrings::translate(sequence_ORF1)
#Translation ORF2
ORF2 <- Biostrings::translate(sequence_ORF2)
aaComp(sequence)
aaComp(ORF2)
ORF2
ORF2[1:6]
aaComp(ORF2[1:6])
# Amino acid composition for health, patienct A and B
aaComp(ORF2[1:6])
mw(ORF2[1:6])
mw(ORF2[1:6])[1]
mw(ORF2[1:6])[1]/mw(ORF2[1:6])[3]
1/(mw(ORF2[1:6])[1]/mw(ORF2[1:6])[3])
aIndex()
?aIndex()
aindex(ORF2)
aIndex(ORF2)
boman(ORF2)
?bowman
?bowman?boman
?boman
mw(ORF2[c(1,7)])
nchar("AAGHRRD")
# Amino acid composition for healthy person and patient C
aaComp(ORF2[c(1,2,7,8)])
# Molecular weight for healthy person and patient C
mw(ORF2[c(1,2,7,8)])
# Aliphatic index of protein for healthy person and pateint C
aIndex(ORF2[c(1,2,7,8)])
# Boman index (potential protein interation) for health person and patient C
boman(ORF2[c(1,2,7,8)])
294/3
entrez_search(db="nucleotide", term = "CSTB[Gene Name] AND homo sapiens[Organism]")
tmp <- entrez_search(db="nucleotide", term = "CSTB[Gene Name] AND homo sapiens[Organism]")
entrez_summary( db ="nucleotide", id= entrez_search(db="nucleotide", term = "CSTB[Gene Name] AND homo sapiens[Organism]"))
sum <- entrez_summary( db ="nucleotide", id= tmp$ids)
extract_from_esummary(sum, "title")
nchar("atga tgtgcggggc
gccctccgcc acgcagccgg ccaccgccga gacccagcac atcgccgacc aggtgaggtc
ccagcttgaa gagaaagaaa acaagaagtt ccctgtgttt aaggccgtgt cattcaagag
ccaggtggtc gcggggacaa actacttcat caaggtgcac gtcggcgacg aggacttcgt
acacctgcga gtgttccaat ctctccctca tgaaaacaag cccttgacct tatctaacta
ccagaccaac aaagccaagc atgatgagct gacctatttc tga")
nchar("atga tgtgcggggcgccctccgcc acgcagccgg ccaccgccga gacccagcac atcgccgacc aggtgaggtc
ccagcttgaa gagaaagaaa acaagaagtt ccctgtgttt aaggccgtgt cattcaagag
ccaggtggtc gcggggacaa actacttcat caaggtgcac gtcggcgacg aggacttcgt
acacctgcga gtgttccaat ctctccctca tgaaaacaag cccttgacct tatctaacta
ccagaccaac aaagccaagc atgatgagct gacctatttc tga")
nchar("atga tgtgcggggcgccctccgcc acgcagccgg ccaccgccga gacccagcac atcgccgacc aggtgaggtc
ccagcttgaa gagaaagaaa acaagaagtt ccctgtgttt aaggccgtgt cattcaagag
ccaggtggtc gcggggacaa actacttcat caaggtgcac gtcggcgacg aggacttcgt
acacctgcga gtgttccaat ctctccctca tgaaaacaag cccttgacct tatctaacta
ccagaccaac aaagccaagc atgatgagct gacctatttctga")
?nchar()
?nchar
403=107
403-107
ccta tttc
"ccta tttc"
agctga
atgatgtgcg gggcgccctc cgccacgcag
"ccggccaccg ccgagaccca"
GGCT
"GGCT"
nchar("ATGTGCGGGCGCCCTCCCGGCCACCGCCGAGACCCA")
nchar("ATGTGCGGGCGCCCTCCCGGCCACC")
nchar("ATGTGCGGGCGCCCTCCCGGC")
nchar("ATG ATG TGC GGG CGC CCT CCC GGC")
nchar("ATGATGTGCGGGCGCCCTCCCGGC")
nchar("ATGATGTGCGGGCGCCCTCCC")
nchar("GTCGTGGTGGTGGTGGTGGAAATAGGTCAGCT")
nchar("GTCGTGGTGGTGGTGGTGGA")
"aagcc aagcatgatg agctgaccta tttc"
GAAATAGGTC
nchar("GAAATAGGTCAGCTCATC")
